[{"E:\\Moshanir\\meeting\\src\\App.js":"1","E:\\Moshanir\\meeting\\src\\index.js":"2","E:\\Moshanir\\meeting\\src\\Component\\NotFound.js":"3","E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js":"4","E:\\Moshanir\\meeting\\src\\Component\\Home.js":"5","E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js":"6","E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js":"7","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js":"8","E:\\Moshanir\\meeting\\src\\Context\\meetingContext.js":"9","E:\\Moshanir\\meeting\\src\\Context\\meetingState.js":"10","E:\\Moshanir\\meeting\\src\\Constant\\constant.js":"11","E:\\Moshanir\\meeting\\src\\Context\\meetingReducer.js":"12","E:\\Moshanir\\meeting\\src\\Context\\types.js":"13","E:\\Moshanir\\meeting\\src\\Component\\MeetingList.js":"14","E:\\Moshanir\\meeting\\src\\Component\\Header.js":"15","E:\\Moshanir\\meeting\\src\\Component\\Common\\User.js":"16"},{"size":1006,"mtime":1619688293308,"results":"17","hashOfConfig":"18"},{"size":491,"mtime":1611218275846,"results":"19","hashOfConfig":"18"},{"size":286,"mtime":1606564027453,"results":"20","hashOfConfig":"18"},{"size":258,"mtime":1611992699555,"results":"21","hashOfConfig":"18"},{"size":272,"mtime":1619852807845,"results":"22","hashOfConfig":"18"},{"size":18846,"mtime":1620295307985,"results":"23","hashOfConfig":"18"},{"size":14542,"mtime":1620286407616,"results":"24","hashOfConfig":"18"},{"size":1060,"mtime":1620293538055,"results":"25","hashOfConfig":"18"},{"size":117,"mtime":1613639207246,"results":"26","hashOfConfig":"18"},{"size":4556,"mtime":1620283864760,"results":"27","hashOfConfig":"18"},{"size":333,"mtime":1620625312763,"results":"28","hashOfConfig":"18"},{"size":1929,"mtime":1620283892604,"results":"29","hashOfConfig":"18"},{"size":750,"mtime":1613635221087,"results":"30","hashOfConfig":"18"},{"size":12558,"mtime":1620295624237,"results":"31","hashOfConfig":"18"},{"size":507,"mtime":1610015300865,"results":"32","hashOfConfig":"18"},{"size":814,"mtime":1618480429553,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"lgxdya",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"E:\\Moshanir\\meeting\\src\\App.js",["71","72"],"import logo from './logo.svg';\nimport './css/App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Switch, Route } from 'react-router-dom';\nimport NotFound from './Component/NotFound';\nimport CreateForm from './Component/CreateSummaryOfMeeting';\n\nimport Loader from './Component/Common/Loader';\nimport Home from './Component/Home';\nimport MeetingState from './Context/meetingState';\nimport MeetingList from './Component/MeetingList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <MeetingState>\n        <BrowserRouter basename='/'>\n          <Switch>\n            <Route exact path='/' component={MeetingList} />\n            <Route exact path='/MeetingList' component={MeetingList} />\n            <Route exact path='/CreateForm' component={CreateForm} />\n\n            <Route exact path='/loader' component={Loader} />\n\n            <Route path='/' component={NotFound} />\n          </Switch>\n        </BrowserRouter>\n      </MeetingState>\n    </div>\n  );\n}\n\nexport default App;\n",["73","74"],"E:\\Moshanir\\meeting\\src\\index.js",[],"E:\\Moshanir\\meeting\\src\\Component\\NotFound.js",[],"E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js",["75"],"import React from 'react';\r\nimport spinner from '../../images/spinner.gif';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div>\r\n      \r\n      <img src={spinner} className='card bg-info text-center card-form' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Home.js",[],"E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js",[],"E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90"],"import React, { useEffect } from 'react';\r\nimport '../../css/CustomTable.css';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGroupBy,\r\n  useExpanded,\r\n  useRowSelect,\r\n} from 'react-table';\r\nimport matchSorter from 'match-sorter';\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n\r\n    td {\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n  editable,\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    //\tupdateMyData(index, id, value);\r\n  };\r\n\r\n  // If the initialValue is changed externall, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  if (!editable) {\r\n    return `${initialValue}`;\r\n  }\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input\r\n      className='forSearch'\r\n      value={filterValue || ''}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`جستجو`}\r\n    />\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=''>All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='range'\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={(e) => {\r\n          setFilter(parseInt(e.target.value, 10));\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  );\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1],\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined,\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\n// Be sure to pass our updateMyData and the skipReset option\r\nfunction CustomTable({ columns, data, updateMyData, pc, skipReset }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    setPageSize(12);\r\n    // updateMyData({ pageIndex, pageSize });\r\n  }, []);\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n      // And also our default editable cell\r\n      //Cell: EditableCell,\r\n    }),\r\n    []\r\n  );\r\n  const setpagesize = () => {};\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: {\r\n      pageIndex,\r\n      pageSize,\r\n      sortBy,\r\n      groupBy,\r\n      expanded,\r\n      filters,\r\n      selectedRowIds,\r\n    },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      pageSize: 15,\r\n      // manualPagination: true,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      //updateMyData,\r\n      // We also need to pass this so the page doesn't change\r\n      // when we edit the data.\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    setpagesize\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    // <div className='scroll rtlDir ' style={{ width: '100vw' }}>\r\n    <div className='scroll rtlDir '>\r\n      <table {...getTableProps()} className='striped highlight w-100'>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <div>\r\n                    {column.canGroupBy ? (\r\n                      // If the column can be grouped, let's add a toggle\r\n                      <span {...column.getGroupByToggleProps()}>\r\n                        {/* {column.isGrouped ? \"🛑 \" : \"+\"} */}\r\n                      </span>\r\n                    ) : null}\r\n                    <span {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      {/* Add a sort direction indicator */}\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} className='trheight'>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? '+' : '-'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell', { editable: false })} (\r\n                          {row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell', { editable: true })\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/*\r\n        Pagination can be built however you'd like.\r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className='pagination'>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span className='m-3'>\r\n          صفحه{' '}\r\n          <strong>\r\n            {pageIndex + 1} از {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        {/* <span>\r\n          |\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"20px\" }}\r\n          />\r\n          رفتن به صفحه{\" \"}\r\n        </span>{\" \"} */}\r\n        {/* <select\r\n          className=\"ml-5\"\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 15, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              نمایش {pageSize}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n      </div>\r\n      {/* <pre>\r\n\t\t\t\t<code>\r\n\t\t\t\t\t{JSON.stringify(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpageIndex,\r\n\t\t\t\t\t\t\tpageSize,\r\n\t\t\t\t\t\t\tpageCount,\r\n\t\t\t\t\t\t\tcanNextPage,\r\n\t\t\t\t\t\t\tcanPreviousPage,\r\n\t\t\t\t\t\t\tsortBy,\r\n\t\t\t\t\t\t\tgroupBy,\r\n\t\t\t\t\t\t\texpanded: expanded,\r\n\t\t\t\t\t\t\tfilters,\r\n\t\t\t\t\t\t\tselectedRowIds: selectedRowIds,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t2\r\n\t\t\t\t\t)}\r\n\t\t\t\t</code>\r\n\t\t\t</pre> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter((row) => {\r\n    const rowValue = row.values[id];\r\n    return rowValue >= filterValue;\r\n  });\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number';\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0;\r\n  let max = leafValues[0] || 0;\r\n\r\n  leafValues.forEach((value) => {\r\n    min = Math.min(min, value);\r\n    max = Math.max(max, value);\r\n  });\r\n\r\n  return Math.round((min + max) / 2);\r\n}\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n      <>\r\n        <input type='checkbox' ref={resolvedRef} {...rest} />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default CustomTable;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingContext.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingState.js",[],"E:\\Moshanir\\meeting\\src\\Constant\\constant.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingReducer.js",[],"E:\\Moshanir\\meeting\\src\\Context\\types.js",[],"E:\\Moshanir\\meeting\\src\\Component\\MeetingList.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import React, { useMemo, useState, useContext, useEffect } from 'react';\r\nimport CustomTable from './Common/CustomTable';\r\nimport { TitleColumns, SubTitleColumns } from './Common/Columns';\r\nimport MeetingContext from '../Context/meetingContext';\r\nimport Header from './Header';\r\nimport { NavLink } from 'react-router-dom';\r\nimport CreateSummaryOfMeeting from './CreateSummaryOfMeeting';\r\n// import RefreshContactList from './Common/RefreshContactList';\r\n// import Loader from './Common/Loader';\r\n// import * as qs from 'query-string';\r\n\r\nconst MeetingList = (props) => {\r\n  const meetingContext = useContext(MeetingContext);\r\n  const [selectedRow, setSelectedRow] = useState('');\r\n  const [DirectPhoneNo, setDirectPhoneNo] = useState('');\r\n  const [Tel, setTel] = useState('');\r\n\r\n  const [dpError, setdpErro] = useState('');\r\n\r\n  const [showdpError, setshowdpError] = useState(false);\r\n  const [isChangeTel, setIsChangeTel] = useState(false);\r\n  const [isChangeDirectPhone, setIsChangeDirectPhone] = useState(false);\r\n\r\n  const [telError, settelError] = useState('');\r\n\r\n  const [showtelError, setshowtelError] = useState(false);\r\n  const {\r\n    GetMeetingList,\r\n\r\n    meetinglist,\r\n    decodePrsCode,\r\n    currentUser,\r\n    GetMeetingById,\r\n    meetData,\r\n    isAdmin,\r\n    error,\r\n  } = meetingContext;\r\n  useEffect(() => {\r\n    // var pc = qs.parse(props.location.search);\r\n    // GetDecodePrsCode(pc.pc);\r\n    GetMeetingList();\r\n  }, []);\r\n\r\n  const setSelectedRowData = (row) => {\r\n    GetMeetingById(row.original.Id);\r\n    // setSelectedRow(meetData[0]);\r\n    console.log(row.original);\r\n    // if (row.original.DirectPhoneNo) {\r\n    //   setDirectPhoneNo(row.original.DirectPhoneNo);\r\n    // }\r\n    // if (row.original.Tel) {\r\n    //   setTel(row.original.Tel);\r\n    // }\r\n  };\r\n\r\n  const kartableActionsAdmin = {\r\n    Header: 'عملیات',\r\n    columns: [\r\n      {\r\n        Header: '.',\r\n        Cell: ({ row }) => (\r\n          <div className='Operations'>\r\n            <button\r\n              type='button'\r\n              className='editBtn'\r\n              data-toggle='modal'\r\n              data-target='.bd-example-modal-lg'\r\n              onClick={(e) => {\r\n                setTel('');\r\n                //setDirectPhoneNo('');\r\n                setSelectedRowData(row);\r\n              }}\r\n            >\r\n              مشاهده\r\n            </button>\r\n          </div>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n  const kartableActions = {\r\n    Header: '-',\r\n    columns: [\r\n      {\r\n        Header: '.',\r\n        Cell: ({ row }) => (\r\n          <div className='Operations' style={{ height: '35px' }}>\r\n            {' '}\r\n          </div>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n  const KartableColumns = useMemo(() => [kartableActions, TitleColumns], []);\r\n  const KartableColumnsForAdmin = useMemo(\r\n    () => [kartableActionsAdmin, TitleColumns],\r\n\r\n    []\r\n  );\r\n\r\n  const SubTitleCol = useMemo(\r\n    () => [SubTitleColumns],\r\n\r\n    []\r\n  );\r\n  const onChanged = (e, Type, maxNum) => {\r\n    switch (Type) {\r\n      case 'Tel':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        setIsChangeTel(true);\r\n        setTel(e.target.value);\r\n        break;\r\n      case 'DirectPhoneNo':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        setIsChangeDirectPhone(true);\r\n        setDirectPhoneNo(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const createorupdateContactToServer = async (frmData, Type) => {\r\n    switch (Type) {\r\n      case 'Admin':\r\n        //  await createOrUpdateContact(frmData);\r\n\r\n        break;\r\n      case 'person':\r\n        //  var pc = qs.parse(props.location.search);\r\n        //console.log(pc.pc);\r\n        // await createOrUpdateContact(frmData, pc.pc);\r\n        // GetDecodePrsCode(pc.pc);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const changeStateByRefreshChild = () => {\r\n    setTel('');\r\n    setDirectPhoneNo('');\r\n    GetMeetingList();\r\n    //GetContactByPrsNum(selectedRow.Prsnum);\r\n    setSelectedRow('');\r\n    setIsChangeDirectPhone(false);\r\n    setIsChangeTel(false);\r\n  };\r\n\r\n  const validateAndSend = async (e, Type) => {\r\n    e.preventDefault();\r\n    switch (Type) {\r\n      case 'person':\r\n        let inputDataPerson = {\r\n          DirectPhoneNo: isChangeDirectPhone\r\n            ? DirectPhoneNo\r\n            : currentUser.DirectPhoneNo,\r\n          Tel: isChangeTel ? Tel : currentUser.Tel,\r\n          // DirectPhoneNo: DirectPhoneNo,\r\n          // Tel: Tel,\r\n          Nam: currentUser.Nam,\r\n          Prsnum: currentUser.Prsnum,\r\n          NamKhanevadegi: currentUser.NamKhanevadegi,\r\n          Moavenat: currentUser.Moavenat,\r\n          Proj_Name: currentUser.Proj_Name,\r\n          Sharh_Onvan: currentUser.Sharh_Onvan,\r\n          NumBuild: currentUser.NumBuild,\r\n        };\r\n\r\n        createorupdateContactToServer(inputDataPerson, Type);\r\n        setTel('');\r\n        setDirectPhoneNo('');\r\n        setIsChangeDirectPhone(false);\r\n        setIsChangeTel(false);\r\n        break;\r\n      case 'Admin':\r\n        let inputData = {\r\n          DirectPhoneNo: isChangeDirectPhone\r\n            ? DirectPhoneNo\r\n            : selectedRow.DirectPhoneNo,\r\n          Tel: isChangeTel ? Tel : selectedRow.Tel,\r\n          Nam: selectedRow.Nam,\r\n          Prsnum: selectedRow.Prsnum,\r\n          NamKhanevadegi: selectedRow.NamKhanevadegi,\r\n          Moavenat: selectedRow.Moavenat,\r\n          Proj_Name: selectedRow.Proj_Name,\r\n          Sharh_Onvan: selectedRow.Sharh_Onvan,\r\n          NumBuild: selectedRow.NumBuild,\r\n        };\r\n\r\n        createorupdateContactToServer(inputData, Type);\r\n        setTel('');\r\n        setDirectPhoneNo('');\r\n        setSelectedRow('');\r\n        setIsChangeDirectPhone(false);\r\n        setIsChangeTel(false);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='text-center'>\r\n      <Header />\r\n\r\n      <div\r\n        className='modal fade bd-example-modal-lg'\r\n        tabIndex='-1'\r\n        role='dialog'\r\n        aria-labelledby='myLargeModalLabel'\r\n        aria-hidden='true'\r\n      >\r\n        <div className='modal-dialog modal-lg'>\r\n          <div className='modal-content'>\r\n            <div className='modal-header '>\r\n              <div className='text-center w-100'>\r\n                <h5 className='modal-title text-center' id='exampleModalLabel'>\r\n                  &nbsp; مشاهده\r\n                </h5>\r\n              </div>\r\n              <button\r\n                type='button'\r\n                className='close'\r\n                data-dismiss='modal'\r\n                aria-label='Close'\r\n              >\r\n                <span aria-hidden='true'>&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className='modal-body'>\r\n              <form>\r\n                <div className='form-group' style={{ direction: 'rtl' }}>\r\n                  <div className='row'>\r\n                    <div className='col-4 text-right'>\r\n                      <label className='col-form-label  '>\r\n                        شماره جلسه:\r\n                        <span className='h7 font-weight-bold '>\r\n                          {meetData ? meetData[0].Id : null}\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className='col-4 text-right'>\r\n                      <label className='d-block'>\r\n                        عنوان جلسه:\r\n                        <span className='h7 font-weight-bold '>\r\n                          {meetData ? meetData[0].Title : null}\r\n                        </span>{' '}\r\n                      </label>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <label className='d-block'>\r\n                        تاریخ جلسه:\r\n                        <span className='h7 font-weight-bold'>\r\n                          {meetData ? meetData[0].MeetingDateStr : null}\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div className='row'>\r\n                    <div className='col-4 text-right'>\r\n                      <label className='col-form-label'>\r\n                        شرکت کنندگان:\r\n                        <span className='h7 font-weight-bold'>\r\n                          {meetData ? meetData[0].InnerParticipators : null}\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <label className='col-form-label'>\r\n                        محل تشکیل:\r\n                        <span className='h7 font-weight-bold'>\r\n                          {meetData ? meetData[0].Location : null}\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                    <div className='col-4 text-right'></div>\r\n                  </div>\r\n                </div>\r\n                <div style={{ boxSizing: 'border-box' }}>\r\n                  <CustomTable\r\n                    columns={SubTitleCol}\r\n                    data={meetData ? meetData[0].lstSubjects : []}\r\n                    //{meetinglist ? meetinglist : []}\r\n                  />\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div className='text-center'>\r\n              <button\r\n                type='button'\r\n                className='btn btn-secondary'\r\n                data-dismiss='modal'\r\n                onClick={changeStateByRefreshChild}\r\n              >\r\n                بستن\r\n              </button>\r\n              <button\r\n                type='button'\r\n                className='btn btn-primary'\r\n                data-dismiss='modal'\r\n                onClick={(e) => validateAndSend(e, 'Admin')}\r\n              >\r\n                ذخیره تغییرات\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='d-inline-block mt-5 mr-5 text-center w-100'>\r\n        {meetinglist.length > 0 &&\r\n        decodePrsCode !==\r\n          'Invalid length htmlFor a Base-64 char array or string.' ? (\r\n          <div className='rtl '>\r\n            <ul\r\n              className='nav nav-tabs nav-justified '\r\n              style={{ direction: 'rtl' }}\r\n              id='myTab'\r\n              role='tablist'\r\n            >\r\n              <li className='nav-item '>\r\n                <a\r\n                  className='nav-link active'\r\n                  id='home-tab'\r\n                  data-toggle='tab'\r\n                  href='#home'\r\n                  role='tab'\r\n                  aria-controls='home'\r\n                  aria-selected='true'\r\n                >\r\n                  مشاهده\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a\r\n                  className='nav-link'\r\n                  id='profile-tab'\r\n                  data-toggle='tab'\r\n                  href='#profile'\r\n                  role='tab'\r\n                  aria-controls='profile'\r\n                  aria-selected='false'\r\n                >\r\n                  ایجاد صورتجلسه\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className='tab-content' id='myTabContent'>\r\n              <div\r\n                className='tab-pane fade show active'\r\n                id='home'\r\n                role='tabpanel'\r\n                aria-labelledby='home-tab'\r\n              >\r\n                <CustomTable\r\n                  columns={KartableColumnsForAdmin}\r\n                  data={meetinglist ? meetinglist : []}\r\n                />\r\n              </div>\r\n\r\n              <div\r\n                className='tab-pane fade w-100'\r\n                id='profile'\r\n                role='tabpanel'\r\n                aria-labelledby='profile-tab'\r\n              >\r\n                <div className='mt-5 ' style={{ width: '100vw' }}>\r\n                  {/* <NavLink to='/CreateForm'>ایجاد یک صورتجلسه</NavLink> */}\r\n                  <CreateSummaryOfMeeting />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          //   <Loader />\r\n\r\n          <label></label>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeetingList;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Header.js",[],"E:\\Moshanir\\meeting\\src\\Component\\Common\\User.js",[],{"ruleId":"107","severity":1,"message":"108","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":12},{"ruleId":"107","severity":1,"message":"111","line":9,"column":8,"nodeType":"109","messageId":"110","endLine":9,"endColumn":12},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":8,"column":7,"nodeType":"118","endLine":8,"endColumn":75},{"ruleId":"107","severity":1,"message":"119","line":15,"column":7,"nodeType":"109","messageId":"110","endLine":15,"endColumn":13},{"ruleId":"107","severity":1,"message":"120","line":58,"column":7,"nodeType":"109","messageId":"110","endLine":58,"endColumn":19},{"ruleId":"107","severity":1,"message":"121","line":93,"column":9,"nodeType":"109","messageId":"110","endLine":93,"endColumn":14},{"ruleId":"107","severity":1,"message":"122","line":109,"column":10,"nodeType":"109","messageId":"110","endLine":109,"endColumn":28},{"ruleId":"107","severity":1,"message":"123","line":143,"column":10,"nodeType":"109","messageId":"110","endLine":143,"endColumn":28},{"ruleId":"107","severity":1,"message":"124","line":178,"column":10,"nodeType":"109","messageId":"110","endLine":178,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":265,"column":6,"nodeType":"127","endLine":265,"endColumn":8,"suggestions":"128"},{"ruleId":"107","severity":1,"message":"129","line":297,"column":7,"nodeType":"109","messageId":"110","endLine":297,"endColumn":15},{"ruleId":"107","severity":1,"message":"130","line":298,"column":7,"nodeType":"109","messageId":"110","endLine":298,"endColumn":13},{"ruleId":"107","severity":1,"message":"131","line":299,"column":7,"nodeType":"109","messageId":"110","endLine":299,"endColumn":14},{"ruleId":"107","severity":1,"message":"132","line":300,"column":7,"nodeType":"109","messageId":"110","endLine":300,"endColumn":15},{"ruleId":"107","severity":1,"message":"133","line":301,"column":7,"nodeType":"109","messageId":"110","endLine":301,"endColumn":14},{"ruleId":"107","severity":1,"message":"134","line":302,"column":7,"nodeType":"109","messageId":"110","endLine":302,"endColumn":21},{"ruleId":"107","severity":1,"message":"135","line":491,"column":10,"nodeType":"109","messageId":"110","endLine":491,"endColumn":23},{"ruleId":"107","severity":1,"message":"136","line":503,"column":7,"nodeType":"109","messageId":"110","endLine":503,"endColumn":28},{"ruleId":"107","severity":1,"message":"137","line":6,"column":10,"nodeType":"109","messageId":"110","endLine":6,"endColumn":17},{"ruleId":"107","severity":1,"message":"138","line":18,"column":10,"nodeType":"109","messageId":"110","endLine":18,"endColumn":17},{"ruleId":"107","severity":1,"message":"139","line":18,"column":19,"nodeType":"109","messageId":"110","endLine":18,"endColumn":28},{"ruleId":"107","severity":1,"message":"140","line":20,"column":10,"nodeType":"109","messageId":"110","endLine":20,"endColumn":21},{"ruleId":"107","severity":1,"message":"141","line":20,"column":23,"nodeType":"109","messageId":"110","endLine":20,"endColumn":37},{"ruleId":"107","severity":1,"message":"142","line":24,"column":10,"nodeType":"109","messageId":"110","endLine":24,"endColumn":18},{"ruleId":"107","severity":1,"message":"143","line":24,"column":20,"nodeType":"109","messageId":"110","endLine":24,"endColumn":31},{"ruleId":"107","severity":1,"message":"144","line":26,"column":10,"nodeType":"109","messageId":"110","endLine":26,"endColumn":22},{"ruleId":"107","severity":1,"message":"145","line":26,"column":24,"nodeType":"109","messageId":"110","endLine":26,"endColumn":39},{"ruleId":"107","severity":1,"message":"146","line":35,"column":5,"nodeType":"109","messageId":"110","endLine":35,"endColumn":12},{"ruleId":"107","severity":1,"message":"147","line":36,"column":5,"nodeType":"109","messageId":"110","endLine":36,"endColumn":10},{"ruleId":"125","severity":1,"message":"148","line":42,"column":6,"nodeType":"127","endLine":42,"endColumn":8,"suggestions":"149"},{"ruleId":"107","severity":1,"message":"150","line":94,"column":9,"nodeType":"109","messageId":"110","endLine":94,"endColumn":24},{"ruleId":"125","severity":1,"message":"151","line":94,"column":74,"nodeType":"127","endLine":94,"endColumn":76,"suggestions":"152"},{"ruleId":"125","severity":1,"message":"153","line":98,"column":5,"nodeType":"127","endLine":98,"endColumn":7,"suggestions":"154"},{"ruleId":"107","severity":1,"message":"155","line":106,"column":9,"nodeType":"109","messageId":"110","endLine":106,"endColumn":18},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","no-native-reassign",["156"],"no-negated-in-lhs",["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Styles' is assigned a value but never used.","'EditableCell' is assigned a value but never used.","'count' is assigned a value but never used.","'SelectColumnFilter' is defined but never used.","'SliderColumnFilter' is defined but never used.","'NumberRangeColumnFilter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPageSize'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'pageSize' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'groupBy' is assigned a value but never used.","'expanded' is assigned a value but never used.","'filters' is assigned a value but never used.","'selectedRowIds' is assigned a value but never used.","'roundedMedian' is defined but never used.","'IndeterminateCheckbox' is assigned a value but never used.","'NavLink' is defined but never used.","'dpError' is assigned a value but never used.","'setdpErro' is assigned a value but never used.","'showdpError' is assigned a value but never used.","'setshowdpError' is assigned a value but never used.","'telError' is assigned a value but never used.","'settelError' is assigned a value but never used.","'showtelError' is assigned a value but never used.","'setshowtelError' is assigned a value but never used.","'isAdmin' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetMeetingList'. Either include it or remove the dependency array.",["159"],"'KartableColumns' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'kartableActions'. Either include it or remove the dependency array.",["160"],"React Hook useMemo has a missing dependency: 'kartableActionsAdmin'. Either include it or remove the dependency array.",["161"],"'onChanged' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: [setPageSize]",{"range":"170","text":"171"},"Update the dependencies array to be: [GetMeetingList]",{"range":"172","text":"173"},"Update the dependencies array to be: [kartableActions]",{"range":"174","text":"175"},"Update the dependencies array to be: [kartableActionsAdmin]",{"range":"176","text":"177"},[6682,6684],"[setPageSize]",[1439,1441],"[GetMeetingList]",[2747,2749],"[kartableActions]",[2852,2854],"[kartableActionsAdmin]"]